package com.evento.web.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.evento.persistence.entities.Evento;
import com.evento.services.EventoService;
import com.evento.services.exceptions.EventoException;
import com.evento.services.exceptions.EventoNotFoundException;

@RestController
@RequestMapping("/evento")
public class EventoControllers {
	
	@Autowired
	private EventoService eventoService;

	//Obtener todos los eventos
	@GetMapping
	public ResponseEntity<?> findAll(){
		return ResponseEntity.ok(this.eventoService.findAll());
	}
	
	//Obtener un evento por ID
	@GetMapping("/{idEvento}")
	public ResponseEntity<?> findById(@PathVariable int idEvento){
		try {
			return ResponseEntity.ok(this.eventoService.findById(idEvento));
		}catch(EventoNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
		}
	}
	
	//Crear un evento
	@PostMapping
	public ResponseEntity<?> create(@RequestBody Evento evento){
		try {
			return ResponseEntity.status(HttpStatus.CREATED).body(this.eventoService.create(evento));
		}catch(EventoException ex) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
		}
	}
	
	//Modificar un evento(nombre,tipo,fecha)
	@PutMapping("/update/{idEvento}")
	public ResponseEntity<?> update(@RequestBody Evento evento){
		try {
			return ResponseEntity.ok(this.eventoService.update(evento));
		}catch(EventoNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
		}catch(EventoException ex) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
		}
	}
	
	//Borrar un evento
	@DeleteMapping("/{idEvento}")
	public ResponseEntity<?> delete(@PathVariable int idEvento){
		try {
			this.eventoService.delete(idEvento);
			return ResponseEntity.ok().build();
		}catch(EventoNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
		}
	}
	
	//Cambiar el estado del evento
	@PutMapping("/updateEstado/{idEvento}")
	public ResponseEntity<?> updateEstado(@PathVariable int idEvento, @RequestParam String estado){
		try {
			return ResponseEntity.ok(this.eventoService.updateEstado(idEvento, estado));
		}catch(EventoNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
		}catch(EventoException ex) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
		}
	}
	
	//Obtener eventos por estado
	@GetMapping("/findByEstado")
	public ResponseEntity<?> findByEstado(@RequestParam String estado){
		try {
			return ResponseEntity.ok(this.eventoService.findByEstado(estado));
		}catch(EventoException ex) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
		}
	}
	
	//Obtener eventos por tipo
	@GetMapping("/findByTipo")
	public ResponseEntity<?> findByTipo(@RequestParam String tipo){
		try {
			return ResponseEntity.ok(this.eventoService.findByTipo(tipo));
		}catch(EventoException ex) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
		}
	}
	
	
	
	//Obtener eventos cuya fecha sea anterior a hoy
		
	//Obtener eventos cuya fecha sea futura a hoy
		
	
	

				
}